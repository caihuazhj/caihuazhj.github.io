<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>HashMapp</title>
      <link href="/2018/08/09/HashMap%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2018/08/09/HashMap%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>#HashMap面试常问知识点总结</p><p>是真滴重要</p><p>###hashmap为什么是数组＋链表，不是数组加数组</p><p>数组的好处是可以根据下标快速的找到对应的元素。链表的好处在于添加、删除方便，不需要移动元素。</p><p>###怎样减少hash碰撞，给出具体方案</p><p>使用不可变的、声明作final的对象，并且采用合适的equals()和hashCode()方法的话，将会减少碰撞的发生，提高效率。不可变性使得能够缓存不同键的hashcode，这将提高整个获取对象的速度，使用String，Interger这样的wrapper类作为键是非常好的选择</p><p>1.增大 <strong>映射空间/原空间</strong> 的大小</p><p>2.尽可能把原数据集均匀映射到较小空间</p><p>3.结合原空间数据的数据特征制定hash函数</p><p>###数组为什么是连续存储的</p><p>连续存储为了查找方便，HashMap此处使用空间换取时间</p><p>###数组的初始长度为什么是16<br><em>此处仅仅为简单描述，不再详细记录</em></p><ol><li>jdk8中resize（）使用h &amp; (table.length - 1)，计算新索引的位置，如果结果是0，位置不变；如果结果是1，位置伟原索引+oldtable.length</li><li>hashmap长度要求为2的n次幂，在第一点中，计算索引位置要求这样；另外，如果不是2的n次幂，容易产生冲突，并且分布不均匀。 </li></ol><p>###HashMap在并发情况下，会出现什么问题（为什么hashmap不是线程安全的）</p><ol><li><p>如果多个线程同时使用put方法添加元素</p><p> 假设正好存在两个put的key发生了碰撞(hash值一样)，那么根据HashMap的实现，这两个key会添加到数组的同一个位置，这样最终就会发生其中一个线程的put的数据被覆盖。</p></li></ol><ol><li><p>如果多个线程同时检测到元素个数超过数组大小*loadFactor</p><p> 这样会发生多个线程同时对hash数组进行扩容，都在重新计算元素位置以及复制数据，但是最终只有一个线程扩容后的数组会赋给table，也就是说其他线程的都会丢失，并且各自线程put的数据也丢失。且会引起死循环的错误。</p></li></ol><p>另外，在扩容时（resize（）），由于采用头插法，会使链表出现闭环。</p><p>###HashMap参数</p><p>#####容量参数：</p><pre><code>static final int _DEFAULT\_INITIAL\_CAPACITY_ = 1 \&amp;lt;\&amp;lt; 4; // aka 16static final int _MAXIMUM\_CAPACITY_ = 1 \&amp;lt;\&amp;lt; 30;static final float _DEFAULT\_LOAD\_FACTOR_ = 0.75f;</code></pre><p>当entry的数量\&gt;= DEFAULT_INITIAL_CAPACITY* DEFAULT_LOAD_FACTOR时，扩容并且resize（）；</p><p>#####树形化参数：</p><pre><code>static final int _TREEIFY\_THRESHOLD_ = 8;static final int _UNTREEIFY\_THRESHOLD_ = 6;static final int _MIN\_TREEIFY\_CAPACITY_ = 64;</code></pre><p>#####TREEIFY与RESIZE</p><p>当好多bin被映射到同一个桶时，如果这个桶中bin的数量小于TREEIFY_THRESHOLD当然不会转化成树形结构存储；</p><p>如果这个桶中bin的数量大于了 TREEIFY_THRESHOLD ，但是capacity小于MIN_TREEIFY_CAPACITY 则依然使用链表结构进行存储，此时会对HashMap进行扩容；（为了避免进行扩容、树形化选择的冲突，这个值不能小于 4 * TREEIFY_THRESHOLD）</p><p>如果capacity大于了MIN_TREEIFY_CAPACITY ，则会进行树化。</p>]]></content>
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis基础</title>
      <link href="/2018/08/08/Redis%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/08/08/Redis%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。<br><a id="more"></a><br>Redis 与其他 key - value 缓存产品有以下三个特点：</p><ul><li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li></ul><hr><h2 id="Redis-简介"><a href="#Redis-简介" class="headerlink" title="Redis 简介"></a>Redis 简介</h2><p>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。<br>Redis 与其他 key - value 缓存产品有以下三个特点：</p><ul><li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li></ul><h2 id="Redis-优势"><a href="#Redis-优势" class="headerlink" title="Redis 优势"></a>Redis 优势</h2><ul><li>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</li><li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li><li>原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li><li>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li></ul><h2 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h2><ul><li>String</li><li>Hash</li><li>List</li><li>Set</li><li>ZSet</li></ul>]]></content>
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/08/05/hello-world/"/>
      <url>/2018/08/05/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
