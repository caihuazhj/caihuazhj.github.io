<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>JAVA基础之Object类学习及公共方法整理</title>
      <link href="/2018/08/09/JAVA%E5%9F%BA%E7%A1%80%E4%B9%8BObject%E7%B1%BB%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%85%AC%E5%85%B1%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/"/>
      <url>/2018/08/09/JAVA%E5%9F%BA%E7%A1%80%E4%B9%8BObject%E7%B1%BB%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%85%AC%E5%85%B1%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<p>面试过程中，经常会问到equals方法和==的区别，还有为什么要重写equals方法和hashCode方法，之前只是简单搜了一下，并没有彻底的理解，也记不住到底有啥区别（真是不走心）。今天在复习过程中又留意到这一点，决定仔细学习一下。</p><p>这篇主要详细写了equals，hashCode和toString方法。<br>笔记参考 《Effective Java》 第三章</p><h1 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h1><p>Object类是所有类的祖先，包括数组。</p><blockquote><p>虽然是一个具体类，但是设计它主要是为了拓展。它所有非final方法(equals,hashCode,toString,clone和finalize)都有明确的通用约定，因为他们被设计成是要被覆盖（override）的。                         —《EFFECTIVE JAVA 第三章》</p></blockquote><a id="more"></a><h2 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h2><p>默认比较的是两个对象的引用是否相等，即是否指向同一个对象（两个对象的地址是否相同）</p><p><strong>什么情况下不需要重写equals方法</strong></p><ul><li>类的每个实例本质上都是唯一的。</li><li>不关心类是否提供了“逻辑相等”的测试功能</li><li>超类已经覆盖了equals，从超类继承过来的行为对于子类也是合适的</li><li>类是私有的或是包级私有的，可以确定塔的equals方法永远不会被调用。</li></ul><p>&ensp;&ensp;&ensp;&ensp;当我们想利用equals方法比较值对象的引用时，希望知道他们在逻辑上是否相等，而不是想了解他们是否指向同一个对象时，就需要覆盖equals方法。</p><p><strong>并且要遵循以下约定：</strong></p><ul><li>自反性</li></ul><p>&ensp;&ensp;&ensp;&ensp;举个栗子，如果违反，在collection中添加元素时，contains方法会告诉你刚才添加的元素不存在</p><ul><li><p>对称性</p></li><li><p>传递性</p></li><li><p>一致性</p></li></ul><p>&ensp;&ensp;&ensp;&ensp;相等的永远相等，不相等的永远不相等</p><p><strong>高质量equals方法诀窍：</strong></p><ul><li>使用==操作符检查“参数是否为这个对象的引用”</li><li>使用instancof操作符检查“参数是否为正确的类型”</li><li>把参数转换成正确的类型</li><li>对于该类中的每个“关键（significant）”域，检查参数中的域是否与该对象中对应的域相匹配。</li></ul><p><strong>另外还需要考虑</strong></p><ul><li>对于非float和double类型的基本类型的域，可以直接使用==操作符进行比较；</li><li>对于对象引用域，可以递归调用equals方法；</li><li>float和double都有对应的compare方法；</li><li>避免空指针异常</li><li>为获得最佳性能，建议从最有可能出错的域开始比较</li><li>Last But Not Least 检查是否满足equals方法的约定</li></ul><p><strong>最终忠告</strong></p><ul><li>覆盖equals方法一定要重写hashCode方法</li><li>不要企图让equals方法太过智能</li><li>不要将equals声明中的参数替换为其它类型</li></ul><h2 id="hashCode方法"><a href="#hashCode方法" class="headerlink" title="hashCode方法"></a>hashCode方法</h2><p>默认情况下hashCode返回的结果与存储地址有一定关联。（hashCode返回的就是对象的存储地址，这种看法是不全面的）</p><p><strong>设计原则</strong></p><ul><li>在程序执行期间，只要equals方法的比较操作用到的信息没有被修改，那么对这同一个对象调用多次，hashCode方法必须始终如一地返回同一个整数。</li><li>如果两个对象根据equals方法比较是相等的，那么调用两个对象的hashCode方法必须返回相同的整数结果。</li><li>如果两个对象根据equals方法比较是不等的，则hashCode方法不一定得返回不同的整数。</li></ul><p>第一条不太好理解，《Java编程思想》中的第495页也有同第一条类似的一段话：</p><blockquote><p>设计hashCode()时最重要的因素就是：无论何时，对同一个对象调用hashCode()都应该产生同样的值。如果在讲一个对象用put()添加进HashMap时产生一个hashCdoe值，而用get()取出时却产生了另一个hashCode值，那么就无法获取该对象了。所以如果你的hashCode方法依赖于对象中易变的数据，用户就要当心了，因为此数据发生变化时，hashCode()方法就会生成一个不同的散列码。</p></blockquote><p>我们可以看一段代码<br>    package TestObject;</p><pre><code>import java.util.HashMap;public class People {    private String name;    private int age;    public People(String name, int age) {        this.name = name;        this.age = age;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public int getAge() {        return age;    }    public void setAge(int age) {        this.age = age;    }    @Override    public int hashCode() {        return name.hashCode()*37+age;    }    @Override    public boolean equals(Object obj) {        return this.name.equals(((People)obj).name) &amp;&amp; this.age== ((People)obj).age;    }    public static void main(String[] args) {        People people = new People(&quot;jack&quot;,13);        System.out.println(people.hashCode());        HashMap&lt;People,Integer&gt; map = new HashMap&lt;&gt;();        map.put(people,1);        people.setAge(11);        System.out.println(map.get(people));    }}</code></pre><p>代码中，使用People的age属性进行构建hashCode方法，当改变age时，再按key去输出value时，为空。</p><p>故在设计hashCode方法和equals方法的时候，如果对象中的数据易变，则最好在equals方法和hashCode方法中不要依赖于该字段。</p><p>第二条讲述了为什么覆盖equals方法一定要重写hashCode方法</p><p>第三条要求为不同的对象产生不同的hashCode值。通常在HashMap,HashSet,HashTable中应用比较广，他们的hashCode方法及过程要好好总结以下。<strong>next Steps</strong></p><h2 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h2><p>默认输出对象地址  getClass().getName() + ‘@’ + Integer. toHexString(hashCode())</p><p>建议重写</p><h2 id="clone方法"><a href="#clone方法" class="headerlink" title="clone方法"></a>clone方法</h2><pre><code>protected native Object clone() throws CloneNotSupportedException;</code></pre><p>谨慎重写</p><h2 id="finalize方法"><a href="#finalize方法" class="headerlink" title="finalize方法"></a>finalize方法</h2><p>一般不必要</p><hr><p>写了这么多知识点，再总结以下关于此部分的面试题</p><h2 id="equals和-的区别"><a href="#equals和-的区别" class="headerlink" title="equals和==的区别"></a>equals和==的区别</h2><p>参考 <a href="https://www.cnblogs.com/dolphin0520/p/3592500.html" title="浅谈Java中的equals和==" target="_blank" rel="noopener">https://www.cnblogs.com/dolphin0520/p/3592500.html</a></p><h3 id="对于操作符”-”"><a href="#对于操作符”-”" class="headerlink" title="对于操作符”==”"></a>对于操作符”==”</h3><p>《Java编程思想》中有这样一句话</p><blockquote><p>关系操作符生成的是一个boolean结果，它们计算的是操作数的值之间的关系</p></blockquote><p>对于JAVA中的基本数据类型的变量，变量直接存储的是“值”，因此在用关系操作符==来进行比较时，比较的就是 “值” 本身。要注意浮点型和整型都是有符号类型的，而char是无符号类型的（char类型取值范围为0~2^16-1)</p><p>而对于非基本数据类型的变量（在一些书籍中称作为引用类型的变量）存储的并不是 “值”本身，而是于其关联的对象在内存中的地址。</p><p><strong>此处引申JAVA引用类型，后记</strong></p><h3 id="对于equals方法"><a href="#对于equals方法" class="headerlink" title="对于equals方法"></a>对于equals方法</h3><p>在上文中提到，在Object类中，equals方法是用来比较两个对象的引用是否相等，即是否指向同一个对象。</p><p>String类对equals方法进行了重写，用来比较指向的字符串对象所存储的字符串是否相等。</p><p>其他的一些类诸如Double，Date，Integer等，都对equals方法进行了重写用来比较指向的对象所存储的内容是否相等。</p><h3 id="最终总结"><a href="#最终总结" class="headerlink" title="最终总结"></a>最终总结</h3><ol><li>对于==，如果作用于基本数据类型的变量，则直接比较其存储的 “值”是否相等；</li></ol><p>　　如果作用于引用类型的变量，则比较的是所指向的对象的地址</p><ol start="2"><li>对于equals方法，注意：equals方法不能作用于基本数据类型的变量</li></ol><p>　　如果没有对equals方法进行重写，则比较的是引用类型的变量所指向的对象的地址；</p><p>　　诸如String、Date等类对equals方法进行了重写的话，比较的是所指向的对象的内容。</p>]]></content>
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HashMap面试</title>
      <link href="/2018/08/09/HashMap%E9%9D%A2%E8%AF%95/"/>
      <url>/2018/08/09/HashMap%E9%9D%A2%E8%AF%95/</url>
      <content type="html"><![CDATA[<h2 id="HashMap面试常问知识点总结"><a href="#HashMap面试常问知识点总结" class="headerlink" title="HashMap面试常问知识点总结"></a>HashMap面试常问知识点总结</h2><p>HashMap的底层主要是基于数组和链表来实现的，它之所以有相当快的查询速度主要是因为它是通过计算散列码来决定存储的位置。HashMap中主要是通过key的hashCode来计算hash值的，只要hashCode相同，计算出来的hash值就一样。如果存储的对象对多了，就有可能不同的对象所算出来的hash值是相同的，这就出现了所谓的hash冲突。学过数据结构的同学都知道，解决hash冲突的方法有很多，HashMap底层是通过链表来解决hash冲突的。</p><p>面试基本都会问，是真滴重要。<br><a id="more"></a></p><h3 id="hashmap为什么是数组＋链表，不是数组加数组"><a href="#hashmap为什么是数组＋链表，不是数组加数组" class="headerlink" title="hashmap为什么是数组＋链表，不是数组加数组"></a>hashmap为什么是数组＋链表，不是数组加数组</h3><p>数组的好处是可以根据下标快速的找到对应的元素。链表的好处在于添加、删除方便，不需要移动元素。</p><h3 id="怎样减少hash碰撞，给出具体方案"><a href="#怎样减少hash碰撞，给出具体方案" class="headerlink" title="怎样减少hash碰撞，给出具体方案"></a>怎样减少hash碰撞，给出具体方案</h3><p>使用不可变的、声明作final的对象，并且采用合适的equals()和hashCode()方法的话，将会减少碰撞的发生，提高效率。不可变性使得能够缓存不同键的hashcode，这将提高整个获取对象的速度，使用String，Interger这样的wrapper类作为键是非常好的选择</p><p>1.增大 <strong>映射空间/原空间</strong> 的大小</p><p>2.尽可能把原数据集均匀映射到较小空间</p><p>3.结合原空间数据的数据特征制定hash函数</p><h3 id="数组为什么是连续存储的"><a href="#数组为什么是连续存储的" class="headerlink" title="数组为什么是连续存储的"></a>数组为什么是连续存储的</h3><p>连续存储为了查找方便，HashMap此处使用空间换取时间</p><h3 id="数组的初始长度为什么是16"><a href="#数组的初始长度为什么是16" class="headerlink" title="数组的初始长度为什么是16"></a>数组的初始长度为什么是16</h3><p><em>此处仅仅为简单描述，不再详细记录</em></p><ol><li>jdk8中resize（）使用h &amp; (table.length - 1)，计算新索引的位置，如果结果是0，位置不变；如果结果是1，位置伟原索引+oldtable.length</li><li>hashmap长度要求为2的n次幂，在第一点中，计算索引位置要求这样；另外，如果不是2的n次幂，容易产生冲突，并且分布不均匀。 </li></ol><h3 id="HashMap在并发情况下，会出现什么问题（为什么hashmap不是线程安全的）"><a href="#HashMap在并发情况下，会出现什么问题（为什么hashmap不是线程安全的）" class="headerlink" title="HashMap在并发情况下，会出现什么问题（为什么hashmap不是线程安全的）"></a>HashMap在并发情况下，会出现什么问题（为什么hashmap不是线程安全的）</h3><ol><li><p>如果多个线程同时使用put方法添加元素</p><p> 假设正好存在两个put的key发生了碰撞(hash值一样)，那么根据HashMap的实现，这两个key会添加到数组的同一个位置，这样最终就会发生其中一个线程的put的数据被覆盖。</p></li></ol><ol><li><p>如果多个线程同时检测到元素个数超过数组大小*loadFactor</p><p> 这样会发生多个线程同时对hash数组进行扩容，都在重新计算元素位置以及复制数据，但是最终只有一个线程扩容后的数组会赋给table，也就是说其他线程的都会丢失，并且各自线程put的数据也丢失。且会引起死循环的错误。</p></li></ol><p>另外，在扩容时（resize（）），由于采用头插法，会使链表出现闭环。</p><h3 id="HashMap参数"><a href="#HashMap参数" class="headerlink" title="HashMap参数"></a>HashMap参数</h3><h4 id="容量参数："><a href="#容量参数：" class="headerlink" title="容量参数："></a>容量参数：</h4><pre><code>static final int _DEFAULT\_INITIAL\_CAPACITY_ = 1 \&amp;lt;\&amp;lt; 4; // aka 16static final int _MAXIMUM\_CAPACITY_ = 1 \&amp;lt;\&amp;lt; 30;static final float _DEFAULT\_LOAD\_FACTOR_ = 0.75f;</code></pre><p>当entry的数量\&gt;= DEFAULT_INITIAL_CAPACITY* DEFAULT_LOAD_FACTOR时，扩容并且resize（）；</p><h4 id="树形化参数："><a href="#树形化参数：" class="headerlink" title="树形化参数："></a>树形化参数：</h4><pre><code>static final int _TREEIFY\_THRESHOLD_ = 8;static final int _UNTREEIFY\_THRESHOLD_ = 6;static final int _MIN\_TREEIFY\_CAPACITY_ = 64;</code></pre><h3 id="TREEIFY与RESIZE"><a href="#TREEIFY与RESIZE" class="headerlink" title="TREEIFY与RESIZE"></a>TREEIFY与RESIZE</h3><p>当好多bin被映射到同一个桶时，如果这个桶中bin的数量小于TREEIFY_THRESHOLD当然不会转化成树形结构存储；</p><p>如果这个桶中bin的数量大于了 TREEIFY_THRESHOLD ，但是capacity小于MIN_TREEIFY_CAPACITY 则依然使用链表结构进行存储，此时会对HashMap进行扩容；（为了避免进行扩容、树形化选择的冲突，这个值不能小于 4 * TREEIFY_THRESHOLD）</p><p>如果capacity大于了MIN_TREEIFY_CAPACITY ，则会进行树化。</p>]]></content>
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis基础</title>
      <link href="/2018/08/08/Redis%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/08/08/Redis%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。<br>Redis 是一个使用 C 语言写成的，开源的 key-value 数据库。。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。目前，Vmware在资助着redis项目的开发和维护。 </p><p>目前没有图片<br><a id="more"></a></p><hr><h2 id="Redis-优势"><a href="#Redis-优势" class="headerlink" title="Redis 优势"></a>Redis 优势</h2><ul><li><strong>性能极高</strong> Redis能读的速度是110000次/s,写的速度是81000次/s 。</li><li><strong>丰富的数据类型</strong> Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li><li><strong>原子</strong> Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li><li><strong>丰富的特性</strong> Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li></ul><h2 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h2><ul><li>String</li><li>Hash</li><li>List</li><li>Set</li><li>ZSet</li></ul><h2 id="Redis底层数据结构"><a href="#Redis底层数据结构" class="headerlink" title="Redis底层数据结构"></a>Redis底层数据结构</h2><h3 id="简单动态字符串SDS"><a href="#简单动态字符串SDS" class="headerlink" title="简单动态字符串SDS"></a>简单动态字符串SDS</h3><h4 id="简单动态字符串结构"><a href="#简单动态字符串结构" class="headerlink" title="简单动态字符串结构"></a>简单动态字符串结构</h4><ol><li><p>len变量，用于记录buf中已经使用的空间长度（这里指出Redis的长度为5）</p></li><li><p>free变量，用于记录buf中还空余的空间（初次分配空间，一般没有空余，在对字符串修改的时候，会有剩余空间出现）</p></li><li><p>buf字符数组，用于记录我们的字符串（记录Redis）</p></li></ol><h4 id="SDS与C字符串的区别"><a href="#SDS与C字符串的区别" class="headerlink" title="SDS与C字符串的区别"></a>SDS与C字符串的区别</h4><ol><li><p><strong>获取字符串长度（SDSO（1）/C字符串O(n)）</strong></p><p>传统的C字符串使用长度为N+1的字符串数组来表示长度为N的字符串，所以为了获取一个长度为C字符串的长度，必须遍历整个字符串。</p><p>和C字符串不同，SDS的数据结构中，有专门用于保存字符串长度的变量，我们可以通过获取len属性的值，直接知道字符串长度。</p></li><li><p><strong>杜绝缓冲区溢出</strong></p><p>当我们需要对一个SDS进行修改的时候，redis会在执行拼接操作之前，预先检查给定SDS空间是否足够，如果不够，会先拓展SDS的空间，然后再执行拼接操作</p></li><li><p><strong>减少修改字符串时带来的内存重分配次数</strong></p><p>预分配策略，SDS将连续增长N次字符串所需的内存重分配次数从必定N次降低为最多N次</p></li><li><p><strong>惰性空间释放</strong></p><p>我们在观察SDS的结构的时候可以看到里面的free属性，是用于记录空余空间的。我们除了在拓展字符串的时候会使用到free来进行记录空余空间以外，在对字符串进行收缩的时候，我们也可以使用free属性来进行记录剩余空间，这样做的好处就是避免下次对字符串进行再次修改的时候，需要对字符串的空间进行拓展。</p><p>然而，我们并不是说不能释放SDS中空余的空间，SDS提供了相应的API，让我们可以在有需要的时候，自行释放SDS的空余空间。</p><p>通过惰性空间释放，SDS避免了缩短字符串时所需的内存重分配操作，并未将来可能有的增长操作提供了优化</p></li><li><p><strong>二进制安全</strong></p><p>Redis中，不是靠空字符来判断字符串的结束的，而是通过len这个属性。那么，即便是中间出现了空字符对于SDS来说，读取该字符仍然是可以的。</p></li><li><p><strong>兼容部分C字符串函数</strong></p><p>虽然SDS的API都是二进制安全的，但他们一样遵循C字符串以空字符串结尾的惯例。</p></li></ol><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>链表在Redis中的应用非常广泛，比如列表键的底层实现之一就是链表。当一个列表键包含了数量较多的元素，又或者列表中包含的元素都是比较长的字符串时，Redis就会使用双向链表作为列表键的底层实现。</p><p>链表的特性</p><ul><li><p>双端：链表节点带有prev和next指针，获取某个节点的前置节点和后置节点的时间复杂度都是O（N）</p></li><li><p>无环：表头节点的prev指针和表尾节点的next都指向NULL，对立案表的访问时以NULL为截止</p></li><li><p>表头和表尾：因为链表带有head指针和tail指针，程序获取链表头结点和尾节点的时间复杂度为O(1)</p></li><li><p>长度计数器：链表中存有记录链表长度的属性len</p></li><li><p>多态：链表节点使用void*指针来保存节点值，并且可以通过list结构的dup、free、match三个属性为节点值设置类型特定函数。</p></li></ul><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>字典，又称为符号表（symbol table）、关联数组（associative array）或映射（map），是一种用于保存键值对的抽象数据结构。　</p><p>在字典中，一个键（key）可以和一个值（value）进行关联，字典中的每个键都是独一无二的。在C语言中，并没有这种数据结构，但是Redis<br>中构建了自己的字典实现。</p><p>Key的存储为hash值，利用拉链法解决hash冲突 。</p><p>哈希表空间分配规则：</p><p>如果执行的是拓展操作，那么ht[1] 的大小为第一个大于等于ht[0] 的2的n次幂</p><p>如果执行的是收缩操作，那么ht[1] 的大小为第一个大于等于ht[0] 的2的n次幂</p><h4 id="Rehash"><a href="#Rehash" class="headerlink" title="Rehash"></a>Rehash</h4><h5 id="渐进式rehash"><a href="#渐进式rehash" class="headerlink" title="渐进式rehash"></a>渐进式rehash</h5><p>在实际开发过程中，rehash<br>操作并不是一次性、集中式完成的，而是分多次、渐进式地完成的。</p><p>渐进式rehash 的详细步骤：</p><p>1、为ht[1] 分配空间，让字典同时持有ht[0]和ht[1]两个哈希表</p><p>2、在几点钟维持一个索引计数器变量rehashidx，并将它的值设置为0，表示rehash 开始</p><p>3、在rehash<br>进行期间，每次对字典执行CRUD操作时，程序除了执行指定的操作以外，还会将ht[0]中的数据rehash<br>到ht[1]表中，并且将rehashidx加一</p><p>4、当ht[0]中所有数据转移到ht[1]中时，将rehashidx 设置成-1，表示rehash 结束</p><p>采用渐进式rehash 的好处在于它采取分而治之的方式，避免了集中式rehash<br>带来的庞大计算量。</p><h3 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h3><p>跳跃表（skiplist）是一种有序数据结构，它通过在每个节点中维持多个指向其他节点的指针，从而达到快速访问节点的目的。跳跃表是一种随机化的数据,跳跃表以有序的方式在层次化的链表中保存元素，效率和平衡树媲美<br>——查找、删除、添加等操作都可以在对数期望时间下完成，并且比起平衡树来说，跳跃表的实现要简单直观得多。</p><p>Redis只在两个地方用到了跳跃表，一个是实现有序集合键，另外一个是在集群节点中用作内部数据结构。</p><ul><li><p>跳跃表是有序集合的底层实现之一</p></li><li><p>主要有zskiplist 和zskiplistNode两个结构组成</p></li><li><p>每个跳跃表节点的层高都是1至32之间的随机数</p></li><li><p>在同一个跳跃表中，多个节点可以包含相同的分值，但每个节点的对象必须是唯一的</p></li><li><p>节点按照分值的大小从大到小排序，如果分值相同，则按成员对象大小排序</p></li></ul><h3 id="整数集合"><a href="#整数集合" class="headerlink" title="整数集合"></a>整数集合</h3><p>intset在默认情况下会帮我们设定整数集合中的编码方式，但是当我们存入的整数不符合整数集合中的编码格式时，就需要使用到Redis中的升级策略来解决</p><p>1、encoding：用于定义整数集合的编码方式</p><p>2、length：用于记录整数集合中变量的数量</p><p>3、contents：用于保存元素的数组，虽然我们在数据结构图中看到，intset将数组定义为int8_t，但实际上数组保存的元素类型取决于encoding</p><p>在上述数据结构图中我们可以看到，intset在默认情况下会帮我们设定整数集合中的编码方式，但是当我们存入的整数不符合整数集合中的编码格式时，就需要使用到Redis中的升级策略来解决</p><p>Intset 中升级整数集合并添加新元素共分为三步进行：</p><ol><li><p>根据新元素的类型，扩展整数集合底层数组的空间大小，并为新元素分配空间</p></li><li><p>将底层数组现有的所有元素都转换成新的编码格式，重新分配空间</p></li><li><p>将新元素加入到底层数组中</p></li></ol><p><strong>整数集合升级的好处</strong></p><p>1、提升灵活性</p><p>2、节约内存</p><h3 id="压缩列表"><a href="#压缩列表" class="headerlink" title="压缩列表"></a>压缩列表</h3><p>压缩列表是列表键和哈希键的底层实现之一。当一个列表键只把汗少量列表项，并且每个列表项要么就是小整数，要么就是长度比较短的字符串，那么Redis<br>就会使用压缩列表来做列表键的底层实现。</p><p>1、zlbytes:用于记录整个压缩列表占用的内存字节数</p><p>2、zltail：记录要列表尾节点距离压缩列表的起始地址有多少字节</p><p>3、zllen：记录了压缩列表包含的节点数量。</p><p>4、entryX：要说列表包含的各个节点</p><p>5、zlend：用于标记压缩列表的末端</p><p>压缩列表是一种为了节约内存而开发的顺序型数据结构</p><p>压缩列表被用作列表键和哈希键的底层实现之一</p><p>压缩列表可以包含多个节点，每个节点可以保存一个字节数组或者整数值</p><p>添加新节点到压缩列表，可能会引发连锁更新操作。</p><h2 id="Redis面试题"><a href="#Redis面试题" class="headerlink" title="Redis面试题"></a>Redis面试题</h2><h3 id="redis实现持久化的方式"><a href="#redis实现持久化的方式" class="headerlink" title="redis实现持久化的方式"></a>redis实现持久化的方式</h3><ol><li>RDB持久化：将Reids在内存中的数据库记录定时dump到磁盘上的RDB持久化</li><li>AOF持久化：将Reids的操作日志以追加的方式写入文件（append only file）</li></ol><h4 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h4><p>   RDB持久化是指在指定的时间间隔内将内存中的数据集快照写入磁盘，实际操作过程是fork一个子进程，先将数据集写入临时文件，写入成功后，再替换之前的文件，用二进制压缩存储。保存文件名为dump.rdb。</p><h5 id="RDB的优势"><a href="#RDB的优势" class="headerlink" title="RDB的优势"></a>RDB的优势</h5><ol><li><p>RDB 是一个非常紧凑（compact）的文件，它保存了 Redis<br>在某个时间点上的数据集。非常适合备份及灾难性恢复；</p></li><li><p>性能最大化，它唯一需要做的只是fork出子进程，避免执行IO操作；</p></li><li><p>相比于AOF机制，如果数据集很大，RDB的启动效率会更高。</p></li></ol><h5 id="RDB缺点"><a href="#RDB缺点" class="headerlink" title="RDB缺点"></a>RDB缺点</h5><ol><li><p>如果你想保证数据的高可用性，即最大限度的避免数据丢失，那么RDB将不是一个很好的选择。因为系统一旦在定时持久化之前出现宕机现象，此前没有来得及写入磁盘的数据都将丢失。</p></li><li><p>由于RDB是通过fork子进程来协助完成数据持久化工作的，因此，如果当数据集较大时，可能会导致整个服务器停止服务几百毫秒，甚至是1秒钟。</p></li></ol><h4 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h4><p>AOF持久化以日志的形式记录服务器所处理的每一个写、删除操作，查询操作不会记录，以文本的方式记录，可以打开文件看到详细的操作记录。</p><h5 id="AOF优点"><a href="#AOF优点" class="headerlink" title="AOF优点"></a>AOF优点</h5><ol><li><p>使用 AOF 持久化会让 Redis 变得非常耐久（much more durable）：Redis中提供了3中同步策略，即每秒同步（默认），每修改步和不同步。</p></li><li><p>由于该机制对日志文件的写入操作采用的是append模式，所以不需要seek，即使日志因为某些原因而包含了未写入完整的命令（比如写入时磁盘已满，写入中途停机，等等），redis-check-aof 工具也可以轻易地修复这种问题。</p></li><li><p>如果日志过大，Redis可以自动启用rewrite机制。即Redis以append模式不断的将修改数据写入到老的磁盘文件中，同时Redis还会创建一个新的文件用于记录此期间有哪些修改命令被执行。因此在进行rewrite切换时可以更好的保证数据安全性。</p></li><li><p>AOF包含一个格式清晰、易于理解的日志文件用于记录所有的修改操作。事实上，我们也可以通过该文件完成数据的重建。</p></li></ol><h5 id="AOF缺点"><a href="#AOF缺点" class="headerlink" title="AOF缺点"></a>AOF缺点</h5><ol><li><p>对于相同数量的数据集而言，AOF文件通常要大于RDB文件。RDB在恢复大数据集时的速度比 AOF 的恢复速度要快。</p></li><li><p>根据同步策略的不同，AOF在运行效率上往往会慢于RDB。</p></li></ol><h3 id="redis与memcached对比"><a href="#redis与memcached对比" class="headerlink" title="redis与memcached对比"></a>redis与memcached对比</h3><p>参考：<a href="https://www.imooc.com/article/23549" target="_blank" rel="noopener">https://www.imooc.com/article/23549</a></p><p>####二者定义</p><p>Memcached：一款完全开源、高性能的、分布式的内存系统；</p><p>Redis：一个开源的、Key-Value型、基于内存运行并支持持久化的NoSQL数据库；</p><h4 id="各方面对比"><a href="#各方面对比" class="headerlink" title="各方面对比"></a>各方面对比</h4><h5 id="网络IO之间的对比"><a href="#网络IO之间的对比" class="headerlink" title="网络IO之间的对比"></a>网络IO之间的对比</h5><p>Memcached是多线程，非阻塞IO复用的网络模型Redis使用单线程的IO复用模型，在高并发场景的压力下，多线程非阻塞式IO的Memcached表现会更加优异。</p><h5 id="内存管理机制"><a href="#内存管理机制" class="headerlink" title="内存管理机制"></a>内存管理机制</h5><ol><li><p>Redis内存空间的利用比Memcahced更精细，引入Memcached是用一个“盒子”对数据进行承载，哪怕这个盒子的尺寸再合适，也不可避免的会有空置；</p></li><li><p>Memcached完美的解决了内存碎片的问题；</p></li><li><p>Memcached内部还存在一个slot的机制，对内存的使用优先使用废弃内存，在内存的重复利用上也具有一定的优势；</p></li><li><p>Redis并不是将所有内存数据都存放在内存中，只会将所有的key存放在内存，在读取的时候会有一定几率存在一次IO操作，在这一点上，Redis是使用时间换取了空间的策略；</p></li></ol><h5 id="数据一致性保障"><a href="#数据一致性保障" class="headerlink" title="数据一致性保障"></a>数据一致性保障</h5><p>Redis提供了一个“事务”的概念，虽然这是一个假的事务，由于Redis是单进程操作，所以Redis的事务仅仅只是将一组操作按顺序进行操作，在这之间不会插入任何其他命令，从而保证数据的一致性，但是这种方式很容易造成操作阻塞。</p><p>Memcached提供了类似于乐观锁一样的cas操作，会快速的返回处理成功或失败，不会对其他数据操作产生影响。在这一点上，Memcached的速度要比Redis更快也更安全。</p><h5 id="二者选择策略"><a href="#二者选择策略" class="headerlink" title="二者选择策略"></a>二者选择策略</h5><p>使用Redis的String类型做的事，都可以用Memcached替换，以此换取更好的性能提升；除此以外，优先考虑Redis；</p><h3 id="Redis的回收策略"><a href="#Redis的回收策略" class="headerlink" title="Redis的回收策略"></a>Redis的回收策略</h3><p><strong>MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据？</strong></p><p>相关知识：redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。</p><p>redis提供6种数据淘汰策略：</p><p>voltile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</p><p>volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</p><p>volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</p><p>allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</p><p>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</p><p>no-enviction（驱逐）：禁止驱逐数据</p>]]></content>
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/08/05/hello-world/"/>
      <url>/2018/08/05/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
