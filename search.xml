<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Object类学习及公共方法整理</title>
      <link href="/2018/08/09/Object%E7%B1%BB%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%85%AC%E5%85%B1%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/"/>
      <url>/2018/08/09/Object%E7%B1%BB%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%85%AC%E5%85%B1%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<p>面试过程中，经常会问到equals方法和==的区别，还有为什么要重写equals方法和hashCode方法，之前只是简单搜了一下，并没有彻底的理解，也记不住到底有啥区别（真是不走心）。今天在复习过程中又留意到这一点，决定仔细学习一下。</p><p>这篇主要详细写了equals，hashCode和toString方法。<br>笔记参考 《Effective Java》 第三章</p><h1 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h1><p>Object类是所有类的祖先，包括数组。</p><blockquote><p>虽然是一个具体类，但是设计它主要是为了拓展。它所有非final方法(equals,hashCode,toString,clone和finalize)都有明确的通用约定，因为他们被设计成是要被覆盖（override）的。                         —《EFFECTIVE JAVA 第三章》</p></blockquote><a id="more"></a><h2 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h2><p>默认比较的是两个对象的引用是否相等，即是否指向同一个对象（两个对象的地址是否相同）</p><p><strong>什么情况下不需要重写equals方法</strong></p><ul><li>类的每个实例本质上都是唯一的。</li><li>不关心类是否提供了“逻辑相等”的测试功能</li><li>超类已经覆盖了equals，从超类继承过来的行为对于子类也是合适的</li><li>类是私有的或是包级私有的，可以确定塔的equals方法永远不会被调用。</li></ul><p>&ensp;&ensp;&ensp;&ensp;当我们想利用equals方法比较值对象的引用时，希望知道他们在逻辑上是否相等，而不是想了解他们是否指向同一个对象时，就需要覆盖equals方法。</p><p><strong>并且要遵循以下约定：</strong></p><ul><li>自反性</li></ul><p>&ensp;&ensp;&ensp;&ensp;举个栗子，如果违反，在collection中添加元素时，contains方法会告诉你刚才添加的元素不存在</p><ul><li><p>对称性</p></li><li><p>传递性</p></li><li><p>一致性</p></li></ul><p>&ensp;&ensp;&ensp;&ensp;相等的永远相等，不相等的永远不相等</p><p><strong>高质量equals方法诀窍：</strong></p><ul><li>使用==操作符检查“参数是否为这个对象的引用”</li><li>使用instancof操作符检查“参数是否为正确的类型”</li><li>把参数转换成正确的类型</li><li>对于该类中的每个“关键（significant）”域，检查参数中的域是否与该对象中对应的域相匹配。</li></ul><p><strong>另外还需要考虑</strong></p><ul><li>对于非float和double类型的基本类型的域，可以直接使用==操作符进行比较；</li><li>对于对象引用域，可以递归调用equals方法；</li><li>float和double都有对应的compare方法；</li><li>避免空指针异常</li><li>为获得最佳性能，建议从最有可能出错的域开始比较</li><li>Last But Not Least 检查是否满足equals方法的约定</li></ul><p><strong>最终忠告</strong></p><ul><li>覆盖equals方法一定要重写hashCode方法</li><li>不要企图让equals方法太过智能</li><li>不要将equals声明中的参数替换为其它类型</li></ul><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><h2 id="hashCode方法"><a href="#hashCode方法" class="headerlink" title="hashCode方法"></a>hashCode方法</h2><p>默认情况下hashCode返回的结果与存储地址有一定关联。（hashCode返回的就是对象的存储地址，这种看法是不全面的）</p><p><strong>设计原则</strong></p><ul><li>在程序执行期间，只要equals方法的比较操作用到的信息没有被修改，那么对这同一个对象调用多次，hashCode方法必须始终如一地返回同一个整数。</li><li>如果两个对象根据equals方法比较是相等的，那么调用两个对象的hashCode方法必须返回相同的整数结果。</li><li>如果两个对象根据equals方法比较是不等的，则hashCode方法不一定得返回不同的整数。</li></ul><p>第一条不太好理解，《Java编程思想》中的第495页也有同第一条类似的一段话：</p><blockquote><p>设计hashCode()时最重要的因素就是：无论何时，对同一个对象调用hashCode()都应该产生同样的值。如果在讲一个对象用put()添加进HashMap时产生一个hashCdoe值，而用get()取出时却产生了另一个hashCode值，那么就无法获取该对象了。所以如果你的hashCode方法依赖于对象中易变的数据，用户就要当心了，因为此数据发生变化时，hashCode()方法就会生成一个不同的散列码。</p></blockquote><p>我们可以看一段代码<br>    package TestObject;</p><pre><code>import java.util.HashMap;public class People {    private String name;    private int age;    public People(String name, int age) {        this.name = name;        this.age = age;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public int getAge() {        return age;    }    public void setAge(int age) {        this.age = age;    }    @Override    public int hashCode() {        return name.hashCode()*37+age;    }    @Override    public boolean equals(Object obj) {        return this.name.equals(((People)obj).name) &amp;&amp; this.age== ((People)obj).age;    }    public static void main(String[] args) {        People people = new People(&quot;jack&quot;,13);        System.out.println(people.hashCode());        HashMap&lt;People,Integer&gt; map = new HashMap&lt;&gt;();        map.put(people,1);        people.setAge(11);        System.out.println(map.get(people));    }}</code></pre><p>代码中，使用People的age属性进行构建hashCode方法，当改变age时，再按key去输出value时，为空。</p><p>故在设计hashCode方法和equals方法的时候，如果对象中的数据易变，则最好在equals方法和hashCode方法中不要依赖于该字段。</p><p>第二条讲述了为什么覆盖equals方法一定要重写hashCode方法</p><p>第三条要求为不同的对象产生不同的hashCode值。通常在HashMap,HashSet,HashTable中应用比较广，他们的hashCode方法及过程要好好总结以下。<strong>next Steps</strong></p><h2 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h2><p>默认输出对象地址  getClass().getName() + ‘@’ + Integer. toHexString(hashCode())</p><p>建议重写</p><h2 id="clone方法"><a href="#clone方法" class="headerlink" title="clone方法"></a>clone方法</h2><pre><code>protected native Object clone() throws CloneNotSupportedException;</code></pre><p>谨慎重写</p><h2 id="finalize方法"><a href="#finalize方法" class="headerlink" title="finalize方法"></a>finalize方法</h2><p>一般不必要</p><hr><p>写了这么多知识点，再总结以下关于此部分的面试题</p><h2 id="equals和-的区别"><a href="#equals和-的区别" class="headerlink" title="equals和==的区别"></a>equals和==的区别</h2><p>参考 <a href="https://www.cnblogs.com/dolphin0520/p/3592500.html" title="浅谈Java中的equals和==" target="_blank" rel="noopener">https://www.cnblogs.com/dolphin0520/p/3592500.html</a></p><h3 id="对于操作符”-”"><a href="#对于操作符”-”" class="headerlink" title="对于操作符”==”"></a>对于操作符”==”</h3><p>《Java编程思想》中有这样一句话</p><blockquote><p>关系操作符生成的是一个boolean结果，它们计算的是操作数的值之间的关系</p></blockquote><p>对于JAVA中的基本数据类型的变量，变量直接存储的是“值”，因此在用关系操作符==来进行比较时，比较的就是 “值” 本身。要注意浮点型和整型都是有符号类型的，而char是无符号类型的（char类型取值范围为0~2^16-1)</p><p>而对于非基本数据类型的变量（在一些书籍中称作为引用类型的变量）存储的并不是 “值”本身，而是于其关联的对象在内存中的地址。</p><p><strong>此处引申JAVA引用类型，后记</strong></p><h3 id="对于equals方法"><a href="#对于equals方法" class="headerlink" title="对于equals方法"></a>对于equals方法</h3><p>在上文中提到，在Object类中，equals方法是用来比较两个对象的引用是否相等，即是否指向同一个对象。</p><p>String类对equals方法进行了重写，用来比较指向的字符串对象所存储的字符串是否相等。</p><p>其他的一些类诸如Double，Date，Integer等，都对equals方法进行了重写用来比较指向的对象所存储的内容是否相等。</p><h3 id="最终总结"><a href="#最终总结" class="headerlink" title="最终总结"></a>最终总结</h3><ol><li>对于==，如果作用于基本数据类型的变量，则直接比较其存储的 “值”是否相等；</li></ol><p>　　如果作用于引用类型的变量，则比较的是所指向的对象的地址</p><ol start="2"><li>对于equals方法，注意：equals方法不能作用于基本数据类型的变量</li></ol><p>　　如果没有对equals方法进行重写，则比较的是引用类型的变量所指向的对象的地址；</p><p>　　诸如String、Date等类对equals方法进行了重写的话，比较的是所指向的对象的内容。</p>]]></content>
      
      <categories>
          
          <category> JAVA -- JAVA基础 --- Object </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Object </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HashMap面试</title>
      <link href="/2018/08/09/HashMap%E9%9D%A2%E8%AF%95/"/>
      <url>/2018/08/09/HashMap%E9%9D%A2%E8%AF%95/</url>
      <content type="html"><![CDATA[<h2 id="HashMap面试常问知识点总结"><a href="#HashMap面试常问知识点总结" class="headerlink" title="HashMap面试常问知识点总结"></a>HashMap面试常问知识点总结</h2><p>HashMap的底层主要是基于数组和链表来实现的，它之所以有相当快的查询速度主要是因为它是通过计算散列码来决定存储的位置。HashMap中主要是通过key的hashCode来计算hash值的，只要hashCode相同，计算出来的hash值就一样。如果存储的对象对多了，就有可能不同的对象所算出来的hash值是相同的，这就出现了所谓的hash冲突。学过数据结构的同学都知道，解决hash冲突的方法有很多，HashMap底层是通过链表来解决hash冲突的。</p><p>面试基本都会问，是真滴重要。<br><a id="more"></a></p><h3 id="hashmap为什么是数组＋链表，不是数组加数组"><a href="#hashmap为什么是数组＋链表，不是数组加数组" class="headerlink" title="hashmap为什么是数组＋链表，不是数组加数组"></a>hashmap为什么是数组＋链表，不是数组加数组</h3><p>数组的好处是可以根据下标快速的找到对应的元素。链表的好处在于添加、删除方便，不需要移动元素。</p><h3 id="怎样减少hash碰撞，给出具体方案"><a href="#怎样减少hash碰撞，给出具体方案" class="headerlink" title="怎样减少hash碰撞，给出具体方案"></a>怎样减少hash碰撞，给出具体方案</h3><p>使用不可变的、声明作final的对象，并且采用合适的equals()和hashCode()方法的话，将会减少碰撞的发生，提高效率。不可变性使得能够缓存不同键的hashcode，这将提高整个获取对象的速度，使用String，Interger这样的wrapper类作为键是非常好的选择</p><p>1.增大 <strong>映射空间/原空间</strong> 的大小</p><p>2.尽可能把原数据集均匀映射到较小空间</p><p>3.结合原空间数据的数据特征制定hash函数</p><h3 id="数组为什么是连续存储的"><a href="#数组为什么是连续存储的" class="headerlink" title="数组为什么是连续存储的"></a>数组为什么是连续存储的</h3><p>连续存储为了查找方便，HashMap此处使用空间换取时间</p><h3 id="数组的初始长度为什么是16"><a href="#数组的初始长度为什么是16" class="headerlink" title="数组的初始长度为什么是16"></a>数组的初始长度为什么是16</h3><p><em>此处仅仅为简单描述，不再详细记录</em></p><ol><li>jdk8中resize（）使用h &amp; (table.length - 1)，计算新索引的位置，如果结果是0，位置不变；如果结果是1，位置伟原索引+oldtable.length</li><li>hashmap长度要求为2的n次幂，在第一点中，计算索引位置要求这样；另外，如果不是2的n次幂，容易产生冲突，并且分布不均匀。 </li></ol><h3 id="HashMap在并发情况下，会出现什么问题（为什么hashmap不是线程安全的）"><a href="#HashMap在并发情况下，会出现什么问题（为什么hashmap不是线程安全的）" class="headerlink" title="HashMap在并发情况下，会出现什么问题（为什么hashmap不是线程安全的）"></a>HashMap在并发情况下，会出现什么问题（为什么hashmap不是线程安全的）</h3><ol><li><p>如果多个线程同时使用put方法添加元素</p><p> 假设正好存在两个put的key发生了碰撞(hash值一样)，那么根据HashMap的实现，这两个key会添加到数组的同一个位置，这样最终就会发生其中一个线程的put的数据被覆盖。</p></li></ol><ol><li><p>如果多个线程同时检测到元素个数超过数组大小*loadFactor</p><p> 这样会发生多个线程同时对hash数组进行扩容，都在重新计算元素位置以及复制数据，但是最终只有一个线程扩容后的数组会赋给table，也就是说其他线程的都会丢失，并且各自线程put的数据也丢失。且会引起死循环的错误。</p></li></ol><p>另外，在扩容时（resize（）），由于采用头插法，会使链表出现闭环。</p><h3 id="HashMap参数"><a href="#HashMap参数" class="headerlink" title="HashMap参数"></a>HashMap参数</h3><h4 id="容量参数："><a href="#容量参数：" class="headerlink" title="容量参数："></a>容量参数：</h4><pre><code>static final int _DEFAULT\_INITIAL\_CAPACITY_ = 1 \&amp;lt;\&amp;lt; 4; // aka 16static final int _MAXIMUM\_CAPACITY_ = 1 \&amp;lt;\&amp;lt; 30;static final float _DEFAULT\_LOAD\_FACTOR_ = 0.75f;</code></pre><p>当entry的数量\&gt;= DEFAULT_INITIAL_CAPACITY* DEFAULT_LOAD_FACTOR时，扩容并且resize（）；</p><h4 id="树形化参数："><a href="#树形化参数：" class="headerlink" title="树形化参数："></a>树形化参数：</h4><pre><code>static final int _TREEIFY\_THRESHOLD_ = 8;static final int _UNTREEIFY\_THRESHOLD_ = 6;static final int _MIN\_TREEIFY\_CAPACITY_ = 64;</code></pre><h3 id="TREEIFY与RESIZE"><a href="#TREEIFY与RESIZE" class="headerlink" title="TREEIFY与RESIZE"></a>TREEIFY与RESIZE</h3><p>当好多bin被映射到同一个桶时，如果这个桶中bin的数量小于TREEIFY_THRESHOLD当然不会转化成树形结构存储；</p><p>如果这个桶中bin的数量大于了 TREEIFY_THRESHOLD ，但是capacity小于MIN_TREEIFY_CAPACITY 则依然使用链表结构进行存储，此时会对HashMap进行扩容；（为了避免进行扩容、树形化选择的冲突，这个值不能小于 4 * TREEIFY_THRESHOLD）</p><p>如果capacity大于了MIN_TREEIFY_CAPACITY ，则会进行树化。</p>]]></content>
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis基础</title>
      <link href="/2018/08/08/Redis%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/08/08/Redis%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。<br><a id="more"></a><br>Redis 与其他 key - value 缓存产品有以下三个特点：</p><ul><li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li></ul><hr><h2 id="Redis-简介"><a href="#Redis-简介" class="headerlink" title="Redis 简介"></a>Redis 简介</h2><p>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。<br>Redis 与其他 key - value 缓存产品有以下三个特点：</p><ul><li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li></ul><h2 id="Redis-优势"><a href="#Redis-优势" class="headerlink" title="Redis 优势"></a>Redis 优势</h2><ul><li>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</li><li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li><li>原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li><li>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li></ul><h2 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h2><ul><li>String</li><li>Hash</li><li>List</li><li>Set</li><li>ZSet</li></ul>]]></content>
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/08/05/hello-world/"/>
      <url>/2018/08/05/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
